What happens when you initialize a repository? Why do you need it?

When I initialize a new repository, git takes an existing directory 
and makes a git repository out of it. There are no commits and 
all the files included in the directory stay in it. I need it, 
because without it I couldn't make any commits.


How is the staging area different from the working directory and the
repository? What value do you think it offers?

The staging area isn't really a directory. It is just a clipboard
where I can add things which I want to commit. It offers a lot of
control on which files I want to have in one commit.


How can you use the staging area to make sure you have one commit per 
logical change?

With assistance of the staging area I can view the changes between 
the staging area and the most recent commit using git diff --staged. 
Therefore I can make sure that the change is a logical one.


What are sometimes situations when branches would be helpful in keeping
your history organized? How would branches help?

When I want to have slightly different versions of a project for
example, two playing modes or two language versions or different
difficulty levels branches are useful to keep track of the different 
versions. Branches store different commits. If I'm on one branch 
I can commit something which will only be commited in this branch
but not the other ones.


How do the diagrams help you visualize the branch structure?

In the diagrams I see which branches exist and which commit has 
which parent. I also can see which commits are unreachable when I
commited them from a detached HEAD state. It helps to understand the
structure better.


What is the result of merging two branches together? Why do we 
represent it in the diagram the way we do?

If you merge two branches a new commit is introduced which has 
the most recent commits of all merged branches as parents.
Therefore the current branch adds all of the other branches'
commits to it's history. It's represented in the diagram with the
additional commit. It's useful if you added a new branch for a feature
for example and the code works you can merge it with the master.


What are the pros and cons of Git's automatic merging vs. always doing
merges manually?

If you do it manually, you have a lot of work to do. Also if there are 
some conflicts between two different versions of code, you might not see
them and get into a conflict. Git's automatic merging finds conflicts
and shows where they are. 